// Firestore security rules for the Madness Schedule app.
// Guards database access so only allowed users can read or write.
// RELEVANT FILES: firebase.json, firestore.indexes.json, functions/index.js
// FILE: firestore.rules

rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    // ===== Helpers =====
    function isSignedIn() {
      return request.auth != null;
    }
    function isAdmin() {
      return isSignedIn()
        && request.auth.token != null
        && ('admin' in request.auth.token)
        && request.auth.token.admin == true;
    }
    
    function cooldownOk(uid) {
      let userDoc = get(/databases/$(db)/documents/users/$(uid));
      // Cooldown is okay if the user has no 'lastCancelAt' field OR if the time since last cancel is >= 15 minutes
      return !('lastCancelAt' in userDoc.data) || (request.time.toMillis() - userDoc.data.lastCancelAt.toMillis() >= 15 * 60 * 1000);
    }

    // ===== CLASSES (Refined) =====
    match /classes/{classId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();

      // Members can nudge the enrollment count by one.
      // First booking initializes the count when it is missing.
      allow update: if isAdmin() ||
      (
        isSignedIn()
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['enrolledCount'])
        && (
          (
            resource.data.enrolledCount == null
            && request.resource.data.enrolledCount == 1
          )
          || (
            resource.data.enrolledCount != null
            && (
              request.resource.data.enrolledCount == resource.data.enrolledCount + 1 ||
              request.resource.data.enrolledCount == resource.data.enrolledCount - 1
            )
          )
        )
      );
    }

    // ===== BOOKINGS =====
    match /bookings/{bookingId} {
      allow get: if isSignedIn();
      allow read: if (isSignedIn() && resource.data.userId == request.auth.uid) || isAdmin();
      allow create: if isAdmin() || (
        isSignedIn()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.classId is string
        && request.resource.data.className is string
        && request.resource.data.startAt is timestamp
        && cooldownOk(request.auth.uid)
      );
      // Booking cancellations must go through the callable Cloud Function.
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // ===== USERS (Final, Simpler Ruleset) =====
    match /users/{userId} {
      allow read: if (isSignedIn() && request.auth.uid == userId) ||
      isAdmin();
      allow create: if isSignedIn() && request.auth.uid == userId &&
        request.resource.data.keys().hasOnly(['email', 'displayName', 'photoURL', 'createdAt']);
      allow update: if (
          isSignedIn()
          && request.auth.uid == userId
          && request.resource.data.diff(resource.data).changedKeys().hasOnly([
            'fcmTokens', 'fcmUpdatedAt', 'displayName', 'photoURL',
            'lastActivity', 'lastCancelAt', 'totalPass', 'subscriptionType'
          ])
          && !request.resource.data.diff(resource.data).changedKeys().hasAny([
            'totalPassVerified', 'subscriptionPaidDate', 'subscriptionStatus'
          ])
          && request.resource.data.email == resource.data.email
          && request.resource.data.createdAt == resource.data.createdAt
      ) ||
      isAdmin();
    }

    // ===== ATTENDANCE =====
    match /attendance/{doc} {
      allow read: if isAdmin() || (
        isSignedIn()
        && resource != null
        && resource.data.userId == request.auth.uid
      );
      allow write: if isAdmin();
    }

    // ===== SCHEDULE TEMPLATE =====
    match /schedule_template/{doc} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // ===== WAITLISTS ===== // MODIFIED 2025-OCT-03
    match /waitlists/{waitlistId} {    
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;    
      
      // Allow reading all waitlists for a class when user is joining  
      allow list: if isSignedIn() || isAdmin();  
      
      allow get: if isAdmin() ||    
      (isSignedIn() && (resource == null || resource.data.userId == request.auth.uid));    
      
      allow delete: if (isSignedIn() && resource.data.userId == request.auth.uid) || isAdmin();    
    }
    
    // ===== NOTIFICATIONS (admin-only) =====
    match /notifications/{notifId} {
        allow read, write: if isAdmin();
    }

    // ===== DAILY MESSAGES =====
    match /dailyMessages/{messageId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // ===== Everything else locked =====
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
